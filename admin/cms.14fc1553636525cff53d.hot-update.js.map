{"version":3,"file":"cms.14fc1553636525cff53d.hot-update.js","sources":["webpack:///./src/components/BlogRoll.js"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Link, graphql, StaticQuery } from 'gatsby'\r\nimport PreviewCompatibleImage from './PreviewCompatibleImage'\r\n\r\nclass BlogRoll extends React.Component {\r\n  render() {\r\n    const { data } = this.props\r\n    const { edges: posts } = data.allMarkdownRemark\r\n\r\n    return (\r\n      <div className=\"columns is-multiline\">\r\n        {posts && posts.map(({ node: post }) => (\r\n          <div className=\"column is-4\" key={post.id}>\r\n            \r\n            <article className={`blog-list-item tile is-child box \r\n                ${ post.frontmatter.featuredpost ? 'is-featured' : ''}`} >\r\n              <header>\r\n                {post.frontmatter.featuredimage ? (\r\n                  <div className=\"featured-thumbnail\">\r\n                    <PreviewCompatibleImage\r\n                      imageInfo={{ image: post.frontmatter.featuredimage,\r\n                        alt: `featured image thumbnail for post ${post.frontmatter.title}`,\r\n                      }}\r\n                    />\r\n                  </div>\r\n                ) : null}\r\n                <p className=\"post-meta\">\r\n                  <Link className=\"title has-text-link is-size-4\" to={post.fields.slug} >\r\n                    {post.frontmatter.title}\r\n                  </Link>\r\n                  <br />\r\n                  <span className=\"has-text-grey\">\r\n                    {post.frontmatter.date}\r\n                  </span>\r\n                </p>\r\n              </header>\r\n              <p>\r\n                {post.excerpt}\r\n                <br />\r\n                <br />\r\n                <Link className=\"button\" to={post.fields.slug}>\r\n                  Keep Reading â†’\r\n                  </Link>\r\n              </p>\r\n            </article>\r\n          </div>\r\n        ))}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nBlogRoll.propTypes = {\r\n  data: PropTypes.shape({\r\n    allMarkdownRemark: PropTypes.shape({\r\n      edges: PropTypes.array,\r\n    }),\r\n  }),\r\n}\r\n\r\nexport default () => (\r\n  <StaticQuery\r\n    query={graphql`\r\n      query BlogRollQuery {\r\n        allMarkdownRemark(\r\n          sort: { order: DESC, fields: [frontmatter___date] }\r\n          filter: { frontmatter: { templateKey: { eq: \"blog-post\" } } }\r\n        ) {\r\n          edges {\r\n            node {\r\n              excerpt(pruneLength: 400)\r\n              id\r\n              fields {\r\n                slug\r\n              }\r\n              frontmatter {\r\n                title\r\n                templateKey\r\n                date(formatString: \"MMMM DD, YYYY\")\r\n                featuredpost\r\n                featuredimage {\r\n                  childImageSharp {\r\n                    fluid(maxWidth: 120, quality: 100) {\r\n                      ...GatsbyImageSharpFluid\r\n                    }\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          }\r\n        }\r\n      }\r\n    `}\r\n    render={(data, count) => <BlogRoll data={data} count={count} />}\r\n  />\r\n)\r\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;AACA;AAAA;AACA;AADA;AAAA;AAIA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AACA;AADA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAKA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AA7BA;AAsCA;AACA;;;;;;;;AA9CA;AACA;AA+CA;AACA;AACA;AACA;AADA;AADA;AADA;AACA;AAOA;AAAA;AAEA;AA+BA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAhCA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AACA;AADA;;;;;;;;;;AAxDA;;;;;;;;;;;;;;A","sourceRoot":""}